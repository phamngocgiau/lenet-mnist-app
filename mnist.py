# -*- coding: utf-8 -*-
"""Untitled28.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GwvPnCVbiM5RPlqBqAsI9pzLSl-CnHwY
"""

# lenet_mnist_app.py

import streamlit as st
import torch
import torch.nn as nn
import torchvision.transforms as transforms
import torchvision.datasets as datasets
import torch.nn.functional as F

# Define LeNet model
class LeNetClassifier(nn.Module):
    def __init__(self, num_classes):
        super().__init__()
        self.conv1 = nn.Conv2d(1, 6, kernel_size=5, padding=2)
        self.pool1 = nn.AvgPool2d(kernel_size=2)
        self.conv2 = nn.Conv2d(6, 16, kernel_size=5)
        self.pool2 = nn.AvgPool2d(kernel_size=2)
        self.flatten = nn.Flatten()
        self.fc1 = nn.Linear(16 * 5 * 5, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, num_classes)

    def forward(self, x):
        x = F.relu(self.conv1(x))
        x = self.pool1(x)
        x = F.relu(self.conv2(x))
        x = self.pool2(x)
        x = self.flatten(x)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x


# Streamlit interface
def main():
    st.title("MNIST Digit Classifier")
    st.write("Upload an image of a handwritten digit to classify it.")

    uploaded_file = st.file_uploader("Choose an image file", type=["png", "jpg", "jpeg"])
    if uploaded_file is not None:
        from PIL import Image
        import numpy as np

        # Load and preprocess the image
        image = Image.open(uploaded_file).convert("L")
        image = transforms.ToTensor()(image).unsqueeze(0)

        # Load pre-trained model
        device = torch.device("cpu")
        model = LeNetClassifier(num_classes=10)
        model.load_state_dict(torch.load("lenet_model.pt", map_location=device))
        model.eval()

        # Predict
        with torch.no_grad():
            outputs = model(image)
            _, predicted = torch.max(outputs, 1)
            st.write(f"Predicted digit: {predicted.item()}")

if __name__ == "__main__":
    main()